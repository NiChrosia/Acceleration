version "1.0"

buildscript {
    ext.kotlin_version = '1.5.0'
    repositories {
        mavenCentral()
    }

    ext {
        kotlinVersion = "1.5.0"
        //the build number that this mod is made for
        mindustryVersion = 'v126.2'
        //version of SDK you will be using
        sdkVersion = '30'
        sdkRoot = System.getenv("ANDROID_HOME")

        doExec = { cmd ->
            def proc = cmd.execute(null, new File("$buildDir/libs"))
            proc.waitForProcessOutput(System.out, System.err)
        }
    }

    dependencies{
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "kotlin"

sourceSets.main.kotlin.srcDirs = ["src", "assets"]

repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

task jarAndroid{
    /*dependsOn "jar"

    doLast{
        //collect dependencies needed for desugaring
        def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")])
        def dependencies = files.collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        doExec("d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar")
    }*/
}

jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }
}

task alphableed doFirst{
    exec{
        workingDir "$rootDir"

        println "Alpha-bleeding sprites..."
        if(System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")){
            commandLine("./alpha-bleeding-windows.exe", "--replace", "./assets/sprites")
        } else {
            commandLine("./alpha-bleed", "./assets/sprites/")
        }
    }
}

task deploy(type: Jar){
    dependsOn alphableed
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar")/*, zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")*/] }

    doLast {
        delete { delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete { delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }

        // Comment the below code out if you're compiling manually on Linux.
        if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")) {
            // Temporary code so I don't have to move the file myself.
            exec {
                commandLine("powershell.exe", "mv -Force build/libs/Acceleration-kotlin.jar ../../Acceleration-kotlin.jar")
            }
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}